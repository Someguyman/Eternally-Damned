
Class MM_Bfgsequence : Inventory //To prevent the bfg ball from changing color while charging
{ 
Default
{
Inventory.MaxAmount 1;
}
}

class MM_BFG9000 : Originalweapon Replaces BFG9000
{
	Default
		{
			Height 20;
			Weapon.SelectionOrder 2800;
			Weapon.AmmoUse 40;
			Weapon.AmmoGive 40;
			Weapon.AmmoType "Cell";
			+WEAPON.NOAUTOFIRE;
			Weapon.UpSound "Weapons/Bfg9000up";
			Inventory.PickupSound "Weapons/Bfg9000Pickup";
			Inventory.PickupMessage "\cgYou got the BFG9000! \cdOh yes!";
			Tag "$TAG_BFG9000";
		}
	
		//bfg charge
			Action void A_Bfgcharge()
		{
			if (CountInv("PowerQuadDamage") == 1 || CountInv("MM_Bfgsequence") == 1)
			{
				A_GiveInventory("MM_Bfgsequence",1);
				A_Overlay(3, "RedCharge"); 
				A_Overlay(2, "RedGlow");
				A_StartSound("Weapons/Poweredbfgfire", CHAN_WEAPON); 
			}
			else
			{
				A_Overlay(3, "Charge"); 
				A_Overlay(2, "Glow");
				A_StartSound("weapons/bfgf", CHAN_WEAPON); 
			}
		}
		
		//bfg flash
			Action void A_Bfgflash1()
		{
			if (CountInv("MM_Bfgsequence") == 1)
			{
				A_Overlay(3, "RedFLASH");
			}
			else
			{
				A_Overlay(3, "FLASH2");
			}
		}
		
		//bfg fire
			Action Void A_FireBigfuckingballs()
		{
			if (CountInv("MM_Bfgsequence") == 1)
			{
				A_FireProjectile("MM_redBFGBall",0,1,0,0,0); 
				A_GunFlash();
			}
			else
			{
				A_FireProjectile("MM_BFGBall",0,1,0,0,0); 
				A_GunFlash();
			}
		}

	States
	{
	Ready:
		BFNG A 1 A_WeaponReady;
		Loop;
	Deselect:
		BFNG A 0 A_TakeInventory("MM_Bfgsequence",1);
	DESelloop:
		BFNG A 1 A_Lower;
		Loop;
	Select:
		BFNG A 1 A_Raise;
		Loop;
	Fire:
		BFNG B 2 A_Bfgcharge();
		BFNG ABAB 2;
		BFNG B 10;
		BFNG B 10 A_Bfgflash1();
		BFNG C 7 A_FireBigfuckingballs();
		BFNG D 3 A_TakeInventory("MM_Bfgsequence",1);
		BFNG A 20 A_ReFire;
		Goto Ready;
	Charge:
		BFNF ABABABABABABAB 2 Bright A_Light1;
		Goto LightDone;
	RedCharge:
		BNFR ABABABABABABAB 2 Bright A_Light1;
		Goto LightDone;
	Flash:
		Goto LightDone;
	Flash2:
		BFNF C 6 Bright A_Light1;
		BFNF D 4 Bright A_Light2;
		Goto LightDone;
	RedFlash:
		BNFR C 6 Bright A_Light1;
		BNFR D 4 Bright A_Light2;
		Goto LightDone;
	GLOW:
		BFNF F 2 Bright A_Light1;
		TNT1 A 2 Bright A_Light1;
		BFNF F 2 Bright A_Light1;
		TNT1 A 2 Bright A_Light1;
		BFNF F 2 Bright A_Light1;
		BFNF E 20 Bright A_Light1;
		Goto LightDone;
	RedGLOW:
		BFNF F 2 Bright A_Light1;
		TNT1 A 2 Bright A_Light1;
		BFNF F 2 Bright A_Light1;
		TNT1 A 2 Bright A_Light1;
		BFNF F 2 Bright A_Light1;
		BFNF F 20 Bright A_Light1;
		Goto LightDone;
	Spawn:
		BFUG A -1;
		Stop;
	//AltFire:
		//BFNG A 10 A_BFGsound;
		//BFNG BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 1 A_FireOldBFG;
		//BFNG B 0 A_Light0;
		//BFNG B 20 A_ReFire;
		//Goto Ready;
	}
}

Class MM_BFG9000pickup : CustomInventory 
{
Default
{
	INVENTORY.RESTRICTEDTO "ET_Player";
	VISIBLETOPLAYERCLASS "ET_Player";
	Inventory.PickupSound "Weapons/Bfg9000Pickup";
	Inventory.PickupMessage "\cgYou got the BFG9000tm! \cdOh yes!";
}
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIfInventory("MM_BFG9000", 1, "Taken");
		BFUG A -1;
		Stop;
	Pickup:
		TNT1 A 0 A_GiveInventory("MM_BFG9000", 1);
		Stop;
	Taken:
		TNT1 A 0;
		Fail;	
	}
}

class MM_BFGBall : BFGBall Replaces BFGball
{
	Default
	{
		Radius 13;
		Height 8;
		Speed 35;
		DamageFunction 400;
		Scale 1.2;
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		+FULLVOLDEATH
		+EXTREMEDEATH
		RenderStyle "Add";
		DamageType "Bigfrickindamage";
		Alpha 0.75;
		SeeSound "Exploplas/sight";
		DeathSound "weapons/bfgx";
		Obituary "$OB_MPBFG_BOOM";
	}
	
			Void A_BFGBalltrail(Class<Actor> p)
	{
		if (CallACS("Projtoggle")==1)
		{
			A_SpawnItemEx(p, 0, 0, 0, 0, 0, 0, 0, 128);
		}
		else
		{
			
		}
	}
	
	States
	{
	Spawn:
		BFS1 AABBAABB 1 Bright A_BFGBalltrail("MM_BFGBallTrail");
		BFS1 A 0 Bright A_Startsound("RailGun/Idle", CHAN_BODY, CHANF_LOOPING, 1, ATTN_NORM);
		Loop;
	Death:
		BFE1 A 8 Bright A_Stopsound(CHAN_BODY);
		BFE1 B 8 Bright;
		BFE1 C 8 Bright A_BFGSpray("MM_BFGExtra");
		BFE1 DEF 8 Bright;
		Stop;
	}
}

class MM_BFGBallTrail : Actor
{
	Default
	{
		PROJECTILE;
		RENDERSTYLE "ADD";
		+NOCLIP
		Scale 1.2;
		Alpha 0.5;
	}
	States
	{
	Spawn:
		TNT1 A 2 Bright;
	fadeaway:
		BFT1 AB 3 Bright A_fadeout(0.2);
		Loop;
	}
}

class MM_BFGExtra : BFGExtra replaces BFGExtra
{
	Default
	{
		SeeSound "BFG/Tracerexp";
		DeathSound "BFG/Tracerexp";
		DamageType "BFGSplash";
		DamageType "Bigfrickindamage";
		DamageType "Extreme";
		RENDERSTYLE "ADD";
		+EXTREMEDEATH
	}
	States
	{
	Spawn:
		BFE2 E 1 Bright;
		BFE2 E 7 Bright A_Startsound("BFG/Tracerexp", CHAN_BODY);
		BFE2 A 8 Bright A_fadeout(0.2);
		BFE2 BCD 4 Bright A_fadeout(0.2);
		Stop;
	}
}

class MM_RedBFGBall : MM_BFGBall
{
	Default
	{
		SeeSound "Weapons/PoweredRedbfgpow";
		DeathSound "Weapons/Poweredbfgexplode";
	}
	States
	{
	Spawn:
		BGR2 AABBAABB 1 Bright A_BFGBalltrail("MM_RedBFGBallTrail");
		BGR2 A 0 Bright A_Startsound("Weapons/PoweredRedbfgIdle", CHAN_BODY, CHANF_LOOPING, 1, ATTN_NORM);
		Loop;
	Death:
		BFR2 AB 8 Bright A_Stopsound(CHAN_BODY);
		BFR2 C 8 Bright A_BFGSpray("MM_RedBFGExtra");
		BFR2 DEF 8 Bright;
		Stop;
	}
}

class MM_RedBFGBallTrail : MM_BFGBallTrail
{
	States
	{
	Spawn:
		TNT1 A 2 Bright;
	fadeaway:
		BFT2 AB 3 Bright A_fadeout(0.2);
		Loop;
	}
}

class MM_RedBFGExtra : MM_BFGExtra
{
	States
	{
	Spawn:
		BRR2 E 1 Bright;
		BRR2 E 7 Bright A_Startsound("BFG/Tracerexp", CHAN_BODY);
		BRR2 A 8 Bright A_fadeout(0.2);
		BRR2 BCD 4 Bright A_fadeout(0.2);
		Stop;
	}
}